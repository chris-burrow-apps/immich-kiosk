package views

import (
	"context"
	"fmt"
	"github.com/damongolding/immich-kiosk/common"
	"github.com/damongolding/immich-kiosk/immich"
	"github.com/damongolding/immich-kiosk/utils"
	human "github.com/dustin/go-humanize"
	"io"
	"net/url"
	"path"
	"strconv"
	"strings"
	"time"
)

// Image is the main entry point for rendering images.
// It determines whether to use a single or split view layout based on the number of images,
// and renders the history form.
//
// Parameters:
//   - viewData: ViewData containing all necessary information for rendering the images.
templ Image(viewData ViewData) {
	if len(viewData.Images) < 2 {
		@layoutSingleView(viewData)
	} else {
		@layoutSplitView(viewData)
	}
	@renderHistory(viewData)
	@renderMoreInfo(viewData)
}

func immichImageUrl(baseUrl, imageID string) string {

	u, err := url.Parse(baseUrl)
	if err != nil {
		return "#"
	}

	apiUrl := url.URL{
		Scheme: u.Scheme,
		Host:   u.Host,
		Path:   path.Join("photos", imageID),
	}

	return apiUrl.String()

}

// webhookSignature generates a signature for webhook authentication.
// It combines the shared secret with the current Unix timestamp
// to create a time-based signature for securing webhook requests.
//
// Returns:
//   - A string containing the calculated signature
func webhookSignature() string {
	return utils.CalculateSignature(common.SharedSecret, strconv.FormatInt(time.Now().Unix(), 10))
}

func people(people []immich.Person) templ.Component {
	if len(people) == 0 {
		return templ.NopComponent
	}

	names := []string{}
	for _, person := range people {
		if person.Name != "" {
			names = append(names, templ.EscapeString(person.Name))
		}
	}

	if len(names) == 0 {
		return templ.NopComponent
	}

	return templ.ComponentFunc(func(ctx context.Context, w io.Writer) error {
		return templ.Raw(`
			<div>
				<div>
					<h3>People</h3>
				</div>
				<div>`+strings.Join(names, ", ")+`</div>
			</div>
		`).Render(ctx, w)
	})
}

templ renderMoreInfo(viewData ViewData) {
	<div id="more-info" hx-swap-oob="true">
		for _, img := range viewData.Images {
			<div class="more-info--image">
				<div class="more-info--image--data">
					<div>
						<div>
							<h3>
								{ img.ImmichImage.ExifInfo.Make }
							</h3>
						</div>
						<div>
							{ img.ImmichImage.ExifInfo.Model }
						</div>
					</div>
					<div>
						<div>
							<h3>
								{ img.ImmichImage.OriginalFileName }
							</h3>
						</div>
						<div>
							{ fmt.Sprint(img.ImmichImage.ExifInfo.ExifImageWidth) } x { fmt.Sprint(img.ImmichImage.ExifInfo.ExifImageHeight) } <span class="image--metadata--exif--seperator">&#124;</span> { human.Bytes(uint64(img.ImmichImage.ExifInfo.FileSizeInByte)) }
						</div>
					</div>
					@people(img.ImmichImage.People)
					<div class="more-info--button-group">
						<a class="more-info--image-link" href={ templ.SafeURL(immichImageUrl(viewData.ImmichUrl, img.ImmichImage.ID)) } target="_blank">
							View image in Immich
						</a>
						if len(viewData.Webhooks) != 0 {
							<button
								class="more-info--webhook"
								hx-post="/webhooks"
								hx-trigger="click throttle:2s"
								hx-include=".kiosk-history--entry"
								hx-headers={ fmt.Sprintf(`{"X-Timestamp": "%d", "X-Signature": "%s", "kiosk-webhook-event": "user.webhook.trigger.info_overlay"}`, time.Now().Unix(), webhookSignature()) }
								hx-swap="textContent"
							>
								Trigger webhook
							</button>
						}
					</div>
				</div>
				<div class="more-info--image--qr-code">
					<img src={ utils.CreateQrCode(immichImageUrl(viewData.ImmichUrl, img.ImmichImage.ID)) }/>
				</div>
			</div>
		}
	</div>
}

// layoutSingleView renders a single image layout.
//
// Parameters:
//   - viewData: ViewData containing all necessary information for rendering the image.
templ layoutSingleView(viewData ViewData) {
	@layoutView(viewData, true)
}

// layoutSplitView renders a split image layout for multiple images.
//
// Parameters:
//   - viewData: ViewData containing all necessary information for rendering the images.
templ layoutSplitView(viewData ViewData) {
	@layoutView(viewData, false)
}

// layoutView renders the layout for either a single image or multiple images.
// It applies the appropriate CSS classes and renders each image using renderSingleImage.
//
// Parameters:
//   - viewData: ViewData containing all necessary information for rendering the images.
//   - isSingle: A boolean indicating whether this is a single image layout.
templ layoutView(viewData ViewData, isSingle bool) {
	<div class={ "frame", templ.KV("frame-black-bg", !viewData.BackgroundBlur) }>
		if isSingle {
			@renderSingleImage(viewData, viewData.Images[0], 0)
		} else {
			for imageIndex, imageData := range viewData.Images {
				<div class={ fmt.Sprintf("frame--layout-%s", viewData.Layout) }>
					@renderSingleImage(viewData, imageData, imageIndex)
				</div>
			}
		}
	</div>
}

// renderSingleImage renders a single image with its background and metadata.
//
// Parameters:
//   - viewData: ViewData containing rendering settings.
//   - imageData: ImageData for the image to be rendered.
//   - imageIndex: The index of the image in the viewData.Images slice.
templ renderSingleImage(viewData ViewData, imageData ImageData, imageIndex int) {
	@renderImageBackground(viewData, imageData)
	@renderImage(viewData, imageData)
	if !viewData.DisableUi {
		@imageMetadata(viewData, imageIndex)
	}
}

// renderImageBackground renders a blurred background image if applicable.
//
// Parameters:
//   - viewData: ViewData containing background blur settings.
//   - imageData: ImageData containing the blur data for the image.
templ renderImageBackground(viewData ViewData, imageData ImageData) {
	if viewData.BackgroundBlur && !strings.EqualFold(viewData.ImageFit, "cover") && len(imageData.ImageBlurData) > 0 {
		<div class="frame--background">
			<img src={ imageData.ImageBlurData } alt="Blurred image background"/>
		</div>
	}
}

// renderImage renders an image with the specified effect and fit.
// It applies zoom effects if specified, otherwise renders the image with the default frame.
//
// Parameters:
//   - viewData: ViewData containing image effect and refresh settings.
//   - imageData: ImageData containing the image data and ImmichImage.
//
// The function uses frameWithZoom for zoom effects and frame for default rendering.
// It delegates to RenderImageWithCoverFit or renderImageFit based on the image effect.
templ renderImage(viewData ViewData, imageData ImageData) {
	switch viewData.ImageEffect {
		case "zoom", "smart-zoom":
			@frameWithZoom(viewData.Refresh, viewData.ImageEffect, imageData.ImmichImage) {
				@RenderImageWithCoverFit(imageData.ImageData, viewData.ImageFit, imageData.ImagePath)
			}
		default:
			@frame() {
				@renderImageFit(imageData.ImageData, viewData.ImageFit, imageData.ImagePath)
			}
	}
}

// renderImageFit selects and renders the appropriate image fit template based on the imageFit parameter.
//
// Parameters:
//   - imageData: A string containing the image data (typically a URL or base64-encoded image).
//   - imageFit: A string specifying the desired image fit style ("cover", "none", or any other value for "contain").
//
// The function uses a switch statement to determine which template to use:
//   - "cover": Uses RenderImageWithCoverFit
//   - "none": Uses RenderImageWithoutFit
//   - Any other value: Uses RenderImageWithContainFit (default behavior)
templ renderImageFit(imageData, imageFit, imagePath string) {
	switch imageFit {
		case "cover":
			@RenderImageWithCoverFit(imageData, imageFit, imagePath)
		case "none":
			@RenderImageWithoutFit(imageData, imageFit)
		default:
			@RenderImageWithContainFit(imageData, imageFit)
	}
}

// RenderImageWithCoverFit renders an image with "cover" fit style.
//
// Parameters:
//   - ImageData: A string containing the image data (typically a URL or base64-encoded image).
//   - imageFit: A string specifying the image fit style (unused in this function).
templ RenderImageWithCoverFit(imageData, imageFit, imagePath string) {
	<img
		class="frame--image-fit-cover"
		src={ fmt.Sprintf("/image/%s", imagePath) }
		alt="Main image"
	/>
}

// RenderImageWithoutFit renders an image without any specific fit style.
//
// Parameters:
//   - ImageData: A string containing the image data (typically a URL or base64-encoded image).
//   - imageFit: A string specifying the image fit style (unused in this function).
templ RenderImageWithoutFit(ImageData, imageFit string) {
	<img
		src={ ImageData }
		alt="Main image"
	/>
}

// RenderImageWithContainFit renders an image with "contain" fit style.
//
// Parameters:
//   - ImageData: A string containing the image data (typically a URL or base64-encoded image).
//   - imageFit: A string specifying the image fit style (unused in this function).
templ RenderImageWithContainFit(ImageData, imageFit string) {
	<img
		class="frame--image-fit-contain"
		src={ ImageData }
		alt="Main image"
	/>
}

// transformOrigin generates a CSS class for the transform-origin property.
//
// Parameters:
//   - value: A string representing the desired transform origin value.
//
// Returns:
//   - A CSS class for the transform-origin property.

css transformOrigin(value string) {
	transform-origin: { value };
	object-position: { value };
}

// smartZoom calculates the transform origin for an image based on detected faces.
// It returns a templ.CSSClass for the transform-origin CSS property.
//
// If no faces are detected, it returns a random corner as the transform origin.
// If faces are detected, it uses the center point of all faces as the transform origin.
//
// Parameters:
//   - image: An immich.ImmichAsset containing information about detected faces.
//
// Returns:
//   - templ.CSSClass: A CSS class for the transform-origin property.
func smartZoom(image immich.ImmichAsset) templ.CSSClass {
	if len(image.People) == 0 && len(image.UnassignedFaces) == 0 {
		return transformOrigin(fmt.Sprintf("%s%% %s%%", utils.RandomItem([]string{"30", "70"}), utils.RandomItem([]string{"30", "70"})))
	}

	x, y := image.FacesCenterPoint()

	if x == 0 || y == 0 {
		return transformOrigin(fmt.Sprintf("%s%% %s%%", utils.RandomItem([]string{"30", "70"}), utils.RandomItem([]string{"30", "70"})))
	}

	return transformOrigin(fmt.Sprintf("%f%% %f%%", x, y))
}

func newHistoryEntry(images []ImageData) string {
	if len(images) == 0 {
		return ""
	}
	newImages := make([]string, len(images))
	for i, entry := range images {
		newImages[i] = entry.ImmichImage.ID
	}
	return strings.Join(newImages, ",")
}

// renderHistory renders a form containing the viewing history of images.
//
// Parameters:
//   - viewData: ViewData containing the history and current images.
templ renderHistory(viewData ViewData) {
	<form id="kiosk-history" hx-swap-oob="true">
		for _, historyEntry := range viewData.History {
			<input type="hidden" class="kiosk-history--entry" name="history" value={ historyEntry }/>
		}
		<input type="hidden" class="kiosk-history--entry" name="history" value={ newHistoryEntry(viewData.Images) }/>
	</form>
}
